// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

export class Comment {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): Comment {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsComment(bb: flatbuffers.ByteBuffer, obj?: Comment): Comment {
    return (obj || new Comment()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  static getSizePrefixedRootAsComment(
    bb: flatbuffers.ByteBuffer,
    obj?: Comment
  ): Comment {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new Comment()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb
    );
  }

  body(): string | null;
  body(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  body(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null;
  }

  cid(): string | null;
  cid(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  cid(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null;
  }

  inReplyTo(): string | null;
  inReplyTo(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  inReplyTo(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 8);
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null;
  }

  static startComment(builder: flatbuffers.Builder) {
    builder.startObject(3);
  }

  static addBody(builder: flatbuffers.Builder, bodyOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, bodyOffset, 0);
  }

  static addCid(builder: flatbuffers.Builder, cidOffset: flatbuffers.Offset) {
    builder.addFieldOffset(1, cidOffset, 0);
  }

  static addInReplyTo(
    builder: flatbuffers.Builder,
    inReplyToOffset: flatbuffers.Offset
  ) {
    builder.addFieldOffset(2, inReplyToOffset, 0);
  }

  static endComment(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createComment(
    builder: flatbuffers.Builder,
    bodyOffset: flatbuffers.Offset,
    cidOffset: flatbuffers.Offset,
    inReplyToOffset: flatbuffers.Offset
  ): flatbuffers.Offset {
    Comment.startComment(builder);
    Comment.addBody(builder, bodyOffset);
    Comment.addCid(builder, cidOffset);
    Comment.addInReplyTo(builder, inReplyToOffset);
    return Comment.endComment(builder);
  }
}
